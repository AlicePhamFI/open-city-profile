# Generated by Django 2.2.4 on 2019-11-05 15:48

from django.db import migrations, models


def match_id_to_uuid(apps, schema_editor):
    Profile = apps.get_model("profiles", "Profile")
    YouthProfile = apps.get_model("youths", "YouthProfile")

    for yp in YouthProfile.objects.all():
        # reassign profile
        p = Profile.objects.filter(id=yp.profile).first()
        if p and p.uuid:
            yp.profile = p.uuid
            yp.save(update_fields=["profile"])
        else:
            # this should not be the case, but let's ensure
            # that this scenario is handled somewhat gracefully:
            # delete the row, because keeping old values
            # will break the followng migrations
            # (both for migrating backwards and forward)
            yp.delete()


def match_uuid_to_id(apps, schema_editor):
    Profile = apps.get_model("profiles", "Profile")
    YouthProfile = apps.get_model("youths", "YouthProfile")

    for yp in YouthProfile.objects.all():
        # reassign profile
        p = Profile.objects.filter(uuid=yp.profile).first()
        if p and p.id:
            yp.profile = p.id
            yp.save(update_fields=["profile"])
        else:
            # see above
            yp.delete()


class Migration(migrations.Migration):

    dependencies = [
        ("youths", "0003_add_alter_andremove_fields"),
        ("profiles", "0009_add_profile_uuid"),
    ]

    operations = [
        migrations.AlterField(
            model_name="youthprofile",
            name="profile",
            field=models.CharField(max_length=36),
        ),
        migrations.RunPython(match_id_to_uuid, match_uuid_to_id),
    ]
